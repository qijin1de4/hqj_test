
0000121241

find ./ -name '*lastUpdated' -type f -exec echo {} \;

# recursively find all files matching a pattern
# grep : -l : instead of printing the matching text, outputs the matching file name 

find ./ -type f -exec grep -i -l 'pattern' {} \;

# get the size of a directory
du -sh /path/to/directory

# find xml files inside a zip with contents matching the pattern
zipgrep '<artifact' yms-release-3.4.1.jar '*.xml'

# list the files insde a jar 
jar -tf abc.jar

# remove a file from a zip/war package
zip -d abc.zip WEB-INF/lib/hrmix-pay-biz-5.1.0.jar


======= bash =======

# read a file line by line

cat $file | \
	while read line; do
	echo $line
	done

### nc connect to redis-server and executes commands
	echo -e "*2\r\n\$4\r\nAUTH\r\n\$16\r\n1111111111111111\r\n*1\r\n\$8\r\nFLUSHALL\r\n" | nc 121.22.22.212 6301

	## execute redis command : set hqj xyz
	echo '*3\r\n$3\r\nset\r\n$3\r\nhqj\r\n$3\r\nxyz\r\n' | nc 127.0.0.1 6379

du -hcs /path/to/target/dir #展示指定目录的大小。

查找指定jar文件并查找jar文件中指定文件名的文件

	find ./ -name '*.jar' -type f -exec sh -c 'printf "\n\nFile: {}"; jar tf {}' ";" | less WaItemExtRefDataHandler

	find ./ -name '*.jar' -type f -exec sh -c 'printf "\n\nFile: {}"; jar tf {}' ";" | grep HRBillContro	ller

linux 查找监听端口
netstat -ltnp | grep '8080' 

# 多行输入
cat << EOF > cat-out-put.txt
start ${param}
EOF

# 查找A中有单B中没有的行
find -x -v -f A B 或者 diff -u A B | grep -e '^¥+'

====== awk ========
# 字符串拼接 
gawk 'BEGIN { SQL="\""} {SQL=SQL $0 "\",\"" } END{print SQL}' platform_tables.txt

# 转化列类型到元数据XML文件
generate_meta_from_columns.awk -v xmlHeader='<?xml version="1.0" encoding="UTF-8"?> \n <components xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imeta.org/meta http://upsms.yonyouup.com/meta.xsd"> \n <component moduleName="" domain="yonbip-hr-paybiz" title="" name=""> \n <class tableName="" name="" title=""> \n <attributes>'  -v xmlFooter='\n </attributes> \n <generalizations> \n </generalizations> \n <realizations> \n </realizations> \n </component> \n </components>' wa_columns_without_header.txt

======= tmux =======

# move panes in clock-wise direction :

bind-key + ctl + o

# attach to an exsiting session:
tmux attach-session -t 0


======= vim =======

# vertically open a new pane for a file,  ctl+w+w / ctl+shit+w : to swith between panes
:vert new path/to/file

# horizontally open a new pane for a file
:new path/to/file

## 显示文件模式
:set ff （fileformat=dos 表示这个是\r\n结尾的dos文件）
:set ff=unix 将dos风格的换行变成unix风格的\n

======= nginx/openresty =======
-- 启动
nginx -p `pwd`/ -c conf/nginx.conf
-- mac 通过brew启动nginx后台服务
brew services start/restart/stop nginx
brew services start/restart/stop openresty




https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/
linux 查看端口监听

测试环境启动etcd
./etcd --name infra1 --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://10.10.150.36:2379


======= MYSQL =======
=== 查询所有主键为int的表

select a.`TABLE_SCHEMA` as `TABLE_SCHEMA`, a.`TABLE_NAME` as `TABLE_NAME` FROM information_schema.`STATISTICS` a inner join information_schema.`COLUMNS` b
on a.`TABLE_SCHEMA` = b.`TABLE_SCHEMA` AND a.`TABLE_NAME` = b.`TABLE_NAME` AND a.`COLUMN_NAME` = b.`COLUMN_NAME` AND a.`TABLE_SCHEMA` = 'diwork_wa_split' AND a.`INDEX_NAME` = 'PRIMARY' and b.`DATA_TYPE` = 'int';

=== 查询所有包含bit类型字段的表
=== 查询所有bill_base表中cbillno字段为ampub_location_tree的表



=== 查询所有的schema
select schema_name as database_name from information_schema.schemata order by schema_name;

=== 存储过程
### 删除租户表的存储过程
DELIMITER //
DROP PROCEDURE if EXISTS `drop_tenant_tables`;
## paramSchema 数据库名， paramTableNamePattern 表名匹配表达式
CREATE procedure drop_tenant_tables(paramSchema varchar(100), paramTableNamePattern varchar(100)) 
BEGIN
	declare tenant_table varchar(100);
	DECLARE s INT default 0;
	declare tenant_tables cursor for select `table_name` from information_schema.`tables` where `table_schema` = paramSchema and table_name like paramTableNamePattern;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET s=1;
	open tenant_tables;		
		fetch tenant_tables into tenant_table;		
		while s <> 1 DO
			set @dro_tbl=concat('drop table ',paramSchema,'.',tenant_table,';');
				##执行删除表操作
			  prepare tmt from @dro_tbl;
				EXECUTE tmt;
				deallocate prepare tmt;
			fetch tenant_tables into tenant_table;
		end while;
	close tenant_tables;
END
//
DELIMITER ;
## 例子
call drop_tenant_tables('hqj', 'hqj_%');

======= redis =======
== 通过docker连接远程redis
	1, 启动redis容器：docker run --name redis-cli -p 6379:6379 -d redis:7.0-rc3
	2, 运行容器中的redis-cli：docker exec -it redis-container-name sh
	3, 在容器中连接远程redis ：redis-cli -h 172.20.32.202 -p 6382 -a OSKwiPCQJxz0rDTm

======= Maven =======
## 展示项目中对个jar的依赖树
mvn dependency:tree -Dincludes=org.projectlombok
## 在依赖树中排除某些包
mvn dependency:tree -Dexcludes=org.springframework.*,org.projectlombok
## 输出依赖树到外部文件	
mvn dependency:tree -DoutputFile=myFile.dot -DoutputType=dot
## 展示实际POM
 mvn help:effective-pom
## 通过exec插件在当前项目依赖环境下执行某个Main类
mvn exec:java -Dexec.mainClass=com.hqj.Main -Dexec.args="70112"
## 在debug模式展示最终引用的dependencies
mvn dependency:resolve -X
## 检查POM情况，发现比如：代码用到但是pom中未引用的依赖，或者引用了但是未用到的依赖等
mvn dependency:analyze
## 展示目前active的profiles
mvn help:active-profiles
## 查看某个插件的详细信息
mvn help:describe -Dcmd=compiler:compile -Ddetail
## 检查版本仲裁情况（-X打开debug模式） mvn dependency:resolve -X。 注意：<dependencyManagement>中的传递依赖也会影响版本仲裁结果

## Maven中没有的依赖，可以通过手动安装jar包添加到maven本地仓库。
mvn install:install-file -DgroupId=javax.naming -DartifactId=jndi -Dversion=1.2.1 -Dpackaging=jar -Dfile=jndi-1_2_1.jar
依赖仲裁，条件装配，

mvn dependency:purge-local-repository clean install –U
purge-local-repository：更新本地依赖库

==== Spring
@Primary Autowire bean的时候，如果有多个candidates，那么打了@Primary的bean优先。
RequestMappingHandlerMapping : @RequestMapping的匹配类

==== Java

== 多线程
	sleep: 保留锁， 释放CPU
	wait:  
	join:


## clone指定的分支
git clone --single-branch --branch develop http://git.xx.ccc/xx.git
git push <remote_name> :deleted_branch 将本地删除的分支同步到远程
git push <remote_name> <commit_id>:refs/heads/<branch_name>  将本地的一个commit推送到相应remote上，如果remote上没有改分支将会创建。

# 创建新分支并且checkout
git switch -c new/branch/name;    git switch another/branch
# 将pull代码同步由merge改为rebase
git config --global pull.rebase true

### NoClassDefFoundError
Since NoClassDefFoundError was thrown, it means the class is there at compile time but at runtime, it cannot be resolved, usually due to version conflicts.

=== JavaScript
实例对象的隐式原型 == 构造函数的显式原型; prototype是函数对象上才有的属性
obj1 instanceof A
	如果A的显式原型对象在a的隐式原型对象链上，那么该表达式就为true，否则false;
变量提升、函数提升: 先执行变量提升，然后再执行函数提升，最后进行变量赋值（如果有变量赋值语句）。变量提升：在变量定义语句(必须是var定义的变量)之前就可以使用变量。
	var c = 1;
	function c(c) {
		console.log(c)
	}
	c(2)
执行上下文：
	1，全局代码执行前，JS引擎会创建一个栈来管理所有执行上下文对象。
	2，全局执行上下文（window）确定后，将其添加到栈中（压栈）
	3，函数执行上下文创建后，将其添加到栈中（压栈）
	4，当前函数执行完后，将栈顶对象移除（出栈）
	4，但所有代码执行完毕后，栈中只剩下全局执行上下文window
闭包产生的条件：1，函数包含子函数；2，子函数包含对外函数的调用；3，外函数执行。

=== JavaScript6
## () => {this} this对象是函数声明时的this对象


=== Mac 
# Be sure to change:
# FOLDER_NAME   - the root folder name. 
# ACTUAL_PATH_TO_REAL_FOLDER - the path to the "real" folder.
# 
#    Example: 
#    "Drives    /Users/bob/Documents/Drives"
#    .......^ this is tab (not spaces)

sudo touch /etc/synthetic.conf
sudo chmod 0777 /etc/synthetic.conf
sudo echo "FOLDER_NAME  ACTUAL_PATH_TO_REAL_FOLDER" >> /etc/synthetic.conf
sudo chmod 0644 /etc/synthetic.conf
sudo chown root:wheel /etc/synthetic.conf


docker run --name hqj-api6-dashboard -v c:\hqj\conf\apisix-dashboard\conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml -v c:\hqj\conf\apisix-dashboard\schema.json:/usr/local/apisix-dashboard/conf/schema.json -v c:\hqj\conf\apisix-dashboard\tmp:/tmp -p 9000:9000 -d apache/apisix-dashboard


docker run --name apisix-dashboard-test -v c:\hqj\conf\apisix-dashboard-test\conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml -v c:\hqj\conf\apisix-dashboard-test\schema.json:/usr/local/apisix-dashboard/conf/schema.json -v c:\hqj\conf\apisix-dashboard-test\tmp:/tmp -p 9020:9020 -d apache/apisix-dashboard


docker run --name hqj-tomcat -v c:\hqj\conf\tomcat\data:/data -p 8008:8080 -d tomcat:jdk8-openjdk

docker run --name cssbase -v /root/apps/:/data -p 8008:8080 -d tomcat:jdk8-arm

docker run --name hqj-mongo -v  c:\hqj\conf\mongo\data:/data/db -p 27017:27017 -d mongo

docker run --name hqj-nacos-server -e MODE=standalone -p 8848:8848 -d nacos/nacos-server

 docker run -p 9000:9000 -p 9001:9001 --name minio-hqj -v /tmp/minio/data:/data quay.io/minio/minio server /data --console-address ':9001'

curl http://10.10.150.39:9080/hello/rest/test/hello/ --cookie "cssSessionId=c5631296be29489c94e22bb870717816; Path=/;"

# 执行jar包里的某个main方法
java -cp fdfs-test-1.0-SNAPSHOT-jar-with-dependencies.jar com.css.FilesNotInBinLog /mnt/c/hqj/idea_projects/fdfs-test/target/data/ /opt/fastdfs/storage_base_local/data/sync/binlog.000


Kafka

docker run  -d --name kafka -p 9092:9092  --e KAFKA_ADVERTISED_HOST_NAME=192.168.56.1  -e KAFKA_ZOOKEEPER_CONNECT=192.168.56.1:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.1:9092  -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -e KAFKA_HEAP_OPTS="-Xmx256M -Xms128M" wurstmeister/kafka 

kafka-manager
docker run -it -d --rm  -p 9000:9000 -e ZK_HOSTS="192.168.56.1:2181" sheepkiller/kafka-manager

postgres 
docker run --name postgres_14 -e POSTGRES_HOST_AUTH_METHOD=trust -v c:\hqj\conf\postgres\data:/var/lib/postgresql/data -p 5432:5432 -d postgres:latest

redis with password
docker run -p 6379:6379 -v c:\hqj\conf\redis\data:/data --name redis_6 -d redis:6.2.6 redis-server --appendonly yes --requirepass "1234"

dm8
-v c:\hqj\conf\dm8\data:/opt/dmdbms/data

docker run -p 5236:5236 -v c:\hqj\conf\dm8\data\PROD\dm.ini:/dm8/data/PROD/dm.ini  -v c:\hqj\conf\dm8\data\hqj:/dm8/hqj --name dm8 -d dm8:v01  /bin/bash /startDm.sh

docker run -p 5236:5236 -v c:\hqj\conf\dm8\hqj:/opt/dmdbms/data --name dm8 -d dm8:v01  /bin/bash /startDm.sh

./dimp USERID=SYSDBA/SYSDBA@localhost:5236 file=uim.dmp DIRECTORY=/opt/dmdbms/data FULL=y

创建topic
./kafka-topics.sh --create --zookeeper 192.168.56.1:2181 --replication-factor 1 --partitions 8 --topic test
创建producer
./kafka-console-producer.sh --broker-list 192.168.56.1:9092 --topic test
创建consumer
./kafka-console-consumer.sh --bootstrap-server 192.168.56.1:9092 --topic test --from-beginning


单机ES：
docker run -d --name hqj-es-7.17.7 -v /Users/qijinhu/docker/elasticsearch/es7-single/plugins:/usr/share/elasticsearch/plugins -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" 60c7d96debc9

windows显示某个监听端口

netstat -ano | findstr 8089


tar解压文件之后发现文件的所有者与权限掩码发生了变化，这是解压后的文件还是使用原机器的owner与权限导致的。
--no-same-owner,  --no-same-permissions 来解决这个问题。

通过PID 488 找到启动该process的程序
tasklist /svc /FI "PID eq 488"

杀死进程
taskkill /F /PID 18076

JVM参数设置java语音为英文
-Duser.language=en -Duser.region=US

jstack -l PID : 不但展示线程堆栈情况还展示锁信息。
jstack -l PID | grep 'java.lang.Thread.State: RUNNABLE' | wc -l #统计可运行状态线程状态

① sleep：不释放锁、释放cpu
② wait：释放锁、释放cpu
③ yield：不释放锁、释放cpu
④ join：释放锁、抢占cpu


创建多个目录
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
添加用户admin到组root
usermod -a -G root admin

Install google chrome on CentOS 7
yum localinstall google-chrome-stable_current_x86_64.rpm

you can start it either from the command line by typing google-chrome & 
or by clicking on the Google Chrome icon (Applications → Internet → Google Chrome

解决windows能看到samba共享文件夹，但点击进入却报告“没有权限的问题”
https://serverfault.com/questions/395486/i-can-connect-to-samba-server-but-cannot-access-shares


sudo docker run \
> -p 6379:6379 \
> -v $PWD/data:/data \
> --name redis \
> -d redis:3.2 redis-server --appendonly yes  --requirepass "__@picker-redis" 

docker run -p 6379:6379 -v c:\hqj\conf\redis\data:/data --name redis_6 -d redis:6.2.6 redis-server --appendonly yes --requirepass "1234"

bloom filter, count-min, hyperloglog


分布式事务解决方案：Saga、XA、TCC、本地消息表等等，当然也有很多优秀的框架比如ByteTCC、TCC-transaction、EasyTransaction以及最近比较火的Seate

XA协议分为两段提交和三段提交，XA是一个规范、协议，它只是定义了一系列的接口。

非hup地后台其进程执行命令，并且std与err输出到同一个文件
nohup xxx > result.txt 2>&1 &

递归查找包含‘pattern'的文件
grep -rnw '/path/to/somewhere/' -e 'pattern'
-r or -R is recursive,
-n is line number, and
-w stands for match the whole word.
-l (lower-case L) can be added to just give the file name of matching files.
-e is the pattern used during the search

解决通过翻墙clone github上的项目时报“OPENSSL connection was reset"错误的解决方案
git config --global http.sslVerify "false"


======== Arthas

java -jar /usr/local/bin/arthas-boot.jar

options save-result true 开启日志输出 位置为/{user.home}/logs/arthas-cache

java -jar /usr/local/bin/arthas-boot.jar

 === 执行类的方法
getstatic org.imeta.spring.support.cache.MetaRedisManager INIT_RETRY_TIMES -x 3

ognl -c 66bb880 -x 3 '#field=@org.imeta.spring.support.cache.MetaRedisManager@class.getDeclaredField("INIT_RETRY_TIMES"),#field.setAccessible(true),#field.set(null,-10)' 
sc -d org.imeta.spring.support.cache.MetaRedisManager

66bb880

ognl -c 30257dd1

ognl -c 66bb880 -x 3 '#field=@org.imeta.spring.support.cache.MetaRedisManager@class.getDeclaredField("INIT_RETRY_TIMES"),#field.setAccessible(true),#field.set(null,-10)' 

getstatic org.imeta.spring.support.cache.MetaRedisManager INIT_RETRY_TIMES -x 3


ognl -x 3 '@org.imeta.core.utils.MetadataPropertyUtil@getMetadataApiServer()'

 sm -d org.imeta.core.utils.MetadataPropertyUtil getMetadataApiServer
 30257dd1
 ognl -c 30257dd1 '@com.yonyou.iuap.utils.PropertyUtil@getPropertyByKey("domain.iuap-metadata-base")'


 抓取数据库账号密码

 watch org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource * '{params,returnObj,throwExp}'  -n 5  -x 3

 
/root/.arthas/lib/3.6.3/arthas/as.sh --select /app/yms

业务：

1，点击组织参照之后没有展示组织数据。
	需要在 “数字化建模-权限管理-授权”节点下分配组织，MDD有大概5分钟的延迟。




	1,WaPayfileItemSelectVo#payfileFormula 
这个payfileFormula是干啥用的啊？本身它的父类WaSchemeItemVO就有 一个 formula属性

======== RegularExpressions 正则表达式 
insert.*bill_base(?!ytenant_id)* : 包含其他条件但是不包含ytenant_id的字符串




======== Apple tips and tricks

option + command + space : brings up a finder search box.
option + shift + k : inserts an apple log ()
command + TAB to switches between running Apps in a mini Expose overlay, you can press [Q] to quit the selected App, because [Command] is actually holded. 
Shift + Command ⌘ + 5，然后选取捕捉整个屏幕、App窗口或者特定区域。
Option-Command-D: Show or hide the Dock
Command–Mission Control: Show the desktop. 

若要在不打开文件的情况下查看其预览，请选择文件，然后按下空格键。

open ~/Library/Preferences/com.prect.NavicatPremium15.plist

cd ~/Library/Application\ Support/PremiumSoft\ CyberTech/Navicat\ CC/Navicat\ Premium/


======== 正则表达式

^\s+`((?!COMMENT).)*$

======= Nice Places in Beijing =====
水库：珠窝 落坡岭 官厅 苇子


data    /tmp/yms_data
data/logs/app/yonbip-hr-bonus/yms.log   /dev/null
data/logs/app/yonbip-hr-paybiz/yms.log  /dev/null
data/logs/app/yonbip-hr-pay/yms.log     /dev/null